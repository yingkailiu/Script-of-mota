module Graphics
  #HWND = Win32API.new('user33', 'GetHWND', 'v', 'i').call
  HWND = Win32API.new("user32", "GetActiveWindow", nil, 'l').call
end
class << Graphics
=begin
    CreateDC = Win32API.new("gdi32", "CreateDC", "pppl", "l")
    CreateCompatibleBitmap = Win32API.new("gdi32", "CreateCompatibleBitmap", "lll", "l")
    CreateCompatibleDC = Win32API.new("gdi32", "CreateCompatibleDC", "l", "l")
    SelectObject = Win32API.new("gdi32", "SelectObject", "ll", "l")
    BitBlt = Win32API.new("gdi32", "BitBlt", "lllllllll", "l")
    GetBitmapBits = Win32API.new("gdi32", "GetBitmapBits", "llp", "l")
    ScreenToClient = Win32API.new("user32", "ScreenToClient", "ip", "i")
    SRCCOPY = 0xCC0020
    RtlMoveMemory = Win32API.new('kernel32', 'RtlMoveMemory', 'ipi', 'i')
    HWnd = Win32API.new("user32", "GetActiveWindow", nil, 'l').call
    
    @readini = Win32API.new 'kernel32', 'GetPrivateProfileStringA', %w(p p p p l p), 'l'
    @findwindow = Win32API.new 'user32', 'FindWindowA', %w(p p), 'l' 
    game_name = "\0" * 256
    @readini.call('Game','Title','',game_name,255,".\\Game.ini")
    game_name.delete!("\0")
    HWnd= @findwindow.call('RGSS Player',game_name)
    
    DwCount = (800* 480 * 4) * 2
    @@lpBits = "\000" * DwCount
    DwCount2 = (160* 480 * 4) * 2
    @@lpBits2 = "\000" * DwCount2
=end
#=begin
  CreateDC = Win32API.new("gdi32", "CreateDC", "pppl", "l")
  CreateCompatibleBitmap = Win32API.new("gdi32", "CreateCompatibleBitmap", "lll", "l")
  CreateCompatibleDC = Win32API.new("gdi32", "CreateCompatibleDC", "l", "l")
  SelectObject = Win32API.new("gdi32", "SelectObject", "ll", "l")
  BitBlt = Win32API.new("gdi32", "BitBlt", "lllllllll", "l")
  GetBitmapBits = Win32API.new("gdi32", "GetBitmapBits", "llp", "l")
  ScreenToClient = Win32API.new("user33", "ScreenToClient", "ip", "i")
  DeleteDC = Win32API.new("gdi32", "DeleteDC", "l", "l")
  DeleteObject = Win32API.new("gdi32", "DeleteObject", "l", "l")
  SRCCOPY = 0xCC0020
  RtlMoveMemory = Win32API.new("kernel32", "RtlMoveMemory", "ipi", "i")
  RtlMoveMemory_pi = Win32API.new("kernel32", "RtlMoveMemory", "pii", "i")
  HWnd = Graphics::HWND#Win32API.new("user32", "GetActiveWindow", nil, 'l').call
  DwCount = (800*480 * 4)# * 2
  @@lpBits = "\000" * DwCount
#=end
  
  #---------------------------------------------------------------------------#
  # snap_to_bitmap                                                            #
  #---------------------------------------------------------------------------#
  def snap_to_bitmap(width=640)
    height = 480
    hb = Bitmap.new(width, height)
    rgbs = self.bitmap_data(width)
    len = width * 4
    for y in 0...height
      break if 2*y >= height - 1
      nth1 = y * len
      nth2 = (height - 1 - y) * len
      tStr = rgbs[nth1,len]
      rgbs[nth1, len] = rgbs[nth2, len]
      rgbs[nth2, len] = tStr
    end
    RtlMoveMemory.call(hb.address, rgbs, width * 480 * 4)
    return hb
  end
  #---------------------------------------------------------------------------#
  # bitmap_data                                                          #
  #---------------------------------------------------------------------------#
  def bitmap_data(width)
=begin
    hScrDC = CreateDC.call("DISPLAY", "", "", 0)
    hMemDC = CreateCompatibleDC.call(hScrDC)
    hBitmap = CreateCompatibleBitmap.call(hScrDC, width, 480)
    hOldBitmap = SelectObject.call(hMemDC, hBitmap)
    BitBlt.call(hMemDC, xsrc, ysrc, width*2, 480*2, hScrDC, 0, 0, SRCCOPY)
    hBitmap = SelectObject.call(hMemDC, hOldBitmap)
    GetBitmapBits.call(hBitmap, DwCount, @@lpBits)
    return @@lpBits
=end
    hScrDC = CreateDC.call("DISPLAY", "", "", 0)
    hMemDC = CreateCompatibleDC.call(hScrDC)
    hBitmap = CreateCompatibleBitmap.call(hScrDC, width, height)
    hOldBitmap = SelectObject.call(hMemDC, hBitmap)
    win_pos = "\0\0\0\0\0\0\0\0"
    ScreenToClient.call(HWnd, win_pos)
    win_pos = win_pos.unpack("LL")
    BitBlt.call(hMemDC, win_pos[0], win_pos[1], width*2, height*2, hScrDC, 0, 0, SRCCOPY)
    hBitmap2 = SelectObject.call(hMemDC, hOldBitmap)
    GetBitmapBits.call(hBitmap2, DwCount, @@lpBits)
    # 释放所有东西
    DeleteDC.call(hScrDC)
    DeleteDC.call(hMemDC)
    DeleteObject.call(hBitmap)
    DeleteObject.call(hOldBitmap)
    DeleteObject.call(hBitmap2)
    return @@lpBits
  end
  #---------------------------------------------------------------------------#
  # 用户窗口的位置                                                            #
  #---------------------------------------------------------------------------#
  def xsrc
    return self.point[0]
  end
  #---------------------------------------------------------------------------#
  # 用户窗口的位置                                                            #
  #---------------------------------------------------------------------------#
  def ysrc
    return self.point[1]
  end
  #---------------------------------------------------------------------------#
  # 那个点                                                                    #
  #---------------------------------------------------------------------------#
  def point
    point = [0,0].pack("LL")
    ScreenToClient.call(HWnd, point)
    return point.unpack("LL")
  end
end

#-----------------------------------------------------------------------------#
# Font                                                                        #
#-----------------------------------------------------------------------------#
class Font
  #---------------------------------------------------------------------------#
  # marshal_dump                                                              #
  #---------------------------------------------------------------------------#
  def marshal_dump
  end
  #---------------------------------------------------------------------------#
  # marshal_load                                                              #
  #---------------------------------------------------------------------------#
  def marshal_load(obj)
  end
end

#-----------------------------------------------------------------------------#
# Bitmap                                                                      #
#-----------------------------------------------------------------------------#
class Bitmap
  RtlMoveMemory = Win32API.new('kernel32', 'RtlMoveMemory', 'pii', 'i')
  # 传送到内存的API函数
  RtlMoveMemory_pi = Win32API.new('kernel32', 'RtlMoveMemory', 'pii', 'i')
  RtlMoveMemory_ip = Win32API.new('kernel32', 'RtlMoveMemory', 'ipi', 'i')
  #---------------------------------------------------------------------------#
  # _dump                                                                     #
  #---------------------------------------------------------------------------#
  def _dump(limit)
    data = "rgba" * width * height
    RtlMoveMemory_pi.call(data, address, data.length)
    [width, height, Zlib::Deflate.deflate(data)].pack("LLa*") # 压缩
  end
  #---------------------------------------------------------------------------#
  # _load                                                                     #
  #---------------------------------------------------------------------------#
  def self._load(str)
    w, h, zdata = str.unpack("LLa*")
    b = self.new(w, h)
    RtlMoveMemory_ip.call(b.address, Zlib::Inflate.inflate(zdata), w * h * 4)
    return b
  end
  #---------------------------------------------------------------------------#
  # address                                                                   #
  #---------------------------------------------------------------------------#
  def address
    # [[[bitmap.object_id * 2 + 16] + 8] + 16] == 数据的开头
    buffer, ad = "xxxx", object_id * 2 + 16
    RtlMoveMemory.call(buffer, ad, 4)
    ad = buffer.unpack("L")[0] + 8
    RtlMoveMemory.call(buffer, ad, 4)
    ad = buffer.unpack("L")[0] + 16
    RtlMoveMemory.call(buffer, ad, 4)
    return buffer.unpack("L")[0]
  end
end
#==============================================================================
#  Graphics 
#------------------------------------------------------------------------------
# 　图像模块
#==============================================================================
#--------------------------------------------------------------------------
#  获取窗口宽
#--------------------------------------------------------------------------
def Graphics.width
  @width ||= 640
end
#--------------------------------------------------------------------------
#  获取窗口高
#--------------------------------------------------------------------------
def Graphics.height
  @height ||= 480
end
#==============================================================================
#  Kernel
#------------------------------------------------------------------------------
# 　该模块中定义了可供所有类使用的方法。Object 类中包含了该模块。
#==============================================================================
module Kernel
  #--------------------------------------------------------------------------
  #  需要的 Windows API 函数
  #--------------------------------------------------------------------------
  GetWindowThreadProcessId = Win32API.new("user32", "GetWindowThreadProcessId", "LP", "L")
  GetWindow = Win32API.new("user32", "GetWindow", "LL", "L")
  GetClassName = Win32API.new("user32", "GetClassName", "LPL", "L")
  GetCurrentThreadId = Win32API.new("kernel32", "GetCurrentThreadId", "V", "L")
  GetForegroundWindow = Win32API.new("user32", "GetForegroundWindow", "V", "L")
  #--------------------------------------------------------------------------
  #  获取窗口句柄
  #--------------------------------------------------------------------------
  def get_hWnd
    # 获取调用线程（RM 的主线程）的进程标识
    threadID = GetCurrentThreadId.call
    # 获取 Z 次序中最靠前的窗口
    hWnd = GetWindow.call(GetForegroundWindow.call, 0)
    # 枚举所有窗口
    while hWnd != 0
      # 如果创建该窗口的线程标识匹配本线程标识
      if threadID == GetWindowThreadProcessId.call(hWnd, 0)
        # 分配一个 11 个字节的缓冲区
        className = " " * 11
        # 获取该窗口的类名
        GetClassName.call(hWnd, className, 12)
        # 如果匹配 RGSS Player 则跳出循环
        break if className == "RGSS Player"
      end
      # 获取下一个窗口
      hWnd = GetWindow.call(hWnd, 2)
    end
    return hWnd
  end
end
